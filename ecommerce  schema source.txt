create table category(
categ_id int generated by default as identity primary key not null,
name char(20),
descrip clob,
createdate date
);

create table discount(
dis_id int generated by default as identity primary key not null,
name char(20),
descrip clob,
percentage number,
amount number,
active_yn char(1),
createdate date
);

create table inventory(
inv_id int generated by default as identity primary key not null,
quantity number,
createdate date
);

create table product(
prod_id int generated by default as identity primary key not null,
prodname varchar(20),
createdate date,
prod_size number,
desc_and_spec clob,
image1 blob,
image2 blob,
image3 blob,
overview varchar(30),
warranty varchar(30),
return_policy varchar(30),
inv_id int,
categ_id int,
dis_id int,
foreign key(inv_id) references inventory(inv_id) on delete cascade,
foreign key(categ_id) references category(categ_id) on delete cascade,
foreign key(dis_id) references discount(dis_id) on delete cascade
);


create table cart_item(
cart_id int generated by default as identity primary key not null,
quantity number,
prod_id int,
foreign key(prod_id) references product(prod_id) on delete cascade
);


create table user_address(
address_id int generated by default as identity primary key not null,
street varchar(30),
locality varchar(20),
city char(20),
country char(20)
);


create table users(
user_id int generated by default as identity primary key not null,
email varchar(30) unique,
passcode varchar(16) unique,
fname char(20),
lname char(20),
mname char(20),
phone number unique constraint phx CHECK(phone>1000000000 and phone<100000000000),
address_id int,
foreign key(address_id) references user_address(address_id) on delete cascade
);

create table order_details(
order_details_id int generated by default as identity primary key not null,
amount number,
delivery_address varchar(30),
delivery_method char(10),
recipient_phone number unique constraint phne CHECK(recipient_phone>1000000000 and recipient_phone<100000000000),
delivery_fees number,
discount number,
cart_id int,
status char(10),
est_delivery_from date,
est_delivery_to date,
foreign key(cart_id) references cart_item(cart_id) on delete cascade
);

create table order_history(
order_details_id int generated by default as identity primary key not null,
amount number,
delivery_address varchar(30),
delivery_method char(10),
recipient_phone number unique constraint phxe CHECK(recipient_phone>1000000000 and recipient_phone<100000000000),
delivery_fees number,
discount number,
cart_id int,
status char(10),
est_delivery_from date,
est_delivery_to date
);

create table payment_details(
ref_no int generated by default as identity primary key not null,
total_amount number,
payment_method varchar(20),
bank char(20),
datetime timestamp,
order_details_id int,
foreign key(order_details_id) references order_details(order_details_id) on delete cascade,
);

alter table payment_details add constraint ord unique(order_details_id);





--VIEWS
  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "PRODUCTION"."V_CATEG" ("CATEG_ID", "NAME", "DESCRIP", "CREATEDATE") AS 
  select "CATEG_ID","NAME","DESCRIP","CREATEDATE" from category;

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "PRODUCTION"."V_CART" ("CART_ID", "QUANTITY", "PROD_ID") AS 
  select "CART_ID","QUANTITY","PROD_ID" from cart_item;

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "PRODUCTION"."V_DIS" ("DIS_ID", "NAME", "DESCRIP", "PERCENTAGE", "AMOUNT", "ACTIVE_YN", "CREATEDATE") AS 
  select "DIS_ID","NAME","DESCRIP","PERCENTAGE","AMOUNT","ACTIVE_YN","CREATEDATE" from discount;

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "PRODUCTION"."V_INV" ("INV_ID", "QUANTITY", "CREATEDATE") AS 
  select "INV_ID","QUANTITY","CREATEDATE" from inv;

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "PRODUCTION"."V_JOIN" ("TOTALPAY", "TOTAL_AMOUNT", "DATE_TIME") AS 
  select order_details.amount*order_details.delivery_fees totalpay, payment_details.total_amount, payment_details.date_time from order_details join
payment_details on order_details.order_details_id=payment_details.order_details_id;

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "PRODUCTION"."V_ORDER" ("ORDER_DETAILS_ID", "DELIVERY_ADDRESS", "DELIVERY_METHOD", "RECIPIENT_PHONE", "DELIVERY_FEES", "DISCOUNT", "CART_ID", "STATUS", "EST_DELIVERY_FROM", "EST_DELIVERY_TO") AS 
  select order_details_id,delivery_address,delivery_method,recipient_phone,delivery_fees,discount,cart_id,status,est_delivery_from,est_delivery_to
from order_details;

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "PRODUCTION"."V_ORDERHIS" ("ORDER_DETAILS_ID", "DELIVERY_ADDRESS", "DELIVERY_METHOD", "RECIPIENT_PHONE", "DELIVERY_FEES", "DISCOUNT", "CART_ID", "STATUS", "EST_DELIVERY_FROM", "EST_DELIVERY_TO") AS 
  select order_details_id,delivery_address,delivery_method,recipient_phone,delivery_fees,discount,cart_id,status,est_delivery_from,est_delivery_to
from order_history;

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "PRODUCTION"."V_PAYMENT" ("PAY_ID", "TOTAL_AMOUNT", "PAYMENT_METHOD", "BANK", "DATE_TIME", "ORDER_DETAILS_ID") AS 
  select "PAY_ID","TOTAL_AMOUNT","PAYMENT_METHOD","BANK","DATE_TIME","ORDER_DETAILS_ID" from payment_details;

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "PRODUCTION"."V_PROD" ("PROD_ID", "PRODNAME", "CREATEDATE", "PROD_SIZE", "INV_ID", "CATEG_ID", "DIS_ID", "DESC_AND_SPEC", "IMAGE1", "IMAGE2", "IMAGE3", "OVERVIEW", "WARRANTY", "RETURN_POLICY") AS 
  select prod_id,prodname,createdate,prod_size,inv_id,categ_id,dis_id,desc_and_spec,image1,image2,image3,overview,warranty,return_policy
from product;

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "PRODUCTION"."V_USER" ("USER_ID", "EMAIL", "USERNAME", "PASSCODE", "FNAME", "LNAME", "MNAME", "PHONE", "ADDRESS_ID") AS 
  select "USER_ID","EMAIL","USERNAME","PASSCODE","FNAME","LNAME","MNAME","PHONE","ADDRESS_ID" from users;

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "PRODUCTION"."V_USERADDRESS" ("ADDRESS_ID", "STREET", "LOCALITY", "CITY", "COUNTRY") AS 
  select "ADDRESS_ID","STREET","LOCALITY","CITY","COUNTRY" from user_address;




--PACKAGE
--Specification

create or replace NONEDITIONABLE package prodpack as
procedure update_user(
p_user_id users.user_id%type, 
p_passcode users.passcode%type
);
procedure del_user(
p_user_id users.user_id%type
);
procedure insert_user(
p_user_id users.user_id%type,
p_passcode users.passcode%type,
p_address_id in number,
p_street in varchar,
p_locality in varchar,
p_city in varchar,
p_country in varchar
);
end prodpack;

--PACKAGE
--Body

create or replace NONEDITIONABLE package body prodpack as
procedure update_user(
p_user_id users.user_id%type, 
p_passcode users.passcode%type
) is
begin
update users set passcode=p_passcode where user_id=p_user_id;
end update_user;

procedure del_user(
p_user_id users.user_id%type
) is
begin
delete from users where user_id=p_user_id;
end del_user;

procedure insert_user(
p_user_id users.user_id%type,
p_passcode users.passcode%type,
p_address_id in number,
p_street in varchar,
p_locality in varchar,
p_city in varchar,
p_country in varchar
)is
begin
insert into user_address(address_id, street, locality, city, country) values(p_address_id, p_street,p_locality,p_city,p_country);
end insert_user;
end prodpack;




--PROCEDURES
create or replace NONEDITIONABLE PROCEDURE calculate_into(
  p_dis_id IN NUMBER,
  total OUT NUMBER
)
IS
BEGIN
  SELECT sum(prod_size) INTO total FROM product WHERE dis_id = p_dis_id;
END; 
 --you must return inorder for the result to be shown in the out parameter

create or replace NONEDITIONABLE procedure del_user(
p_user_id in number
) is
begin
delete from users where user_id=p_user_id;
end;

create or replace NONEDITIONABLE procedure ins_order(
p_order_details_id in number,
p_amount in number,
p_addr in varchar,
p_method in varchar,
p_phone in number,
p_fees in number,
p_discount in varchar,
p_cart_id in number,
p_status in char,
p_est_delivery_from in date,
p_est_delivery_to in date
) is
begin
insert into order_details(order_details_id,amount,delivery_address,delivery_method,recipient_phone,delivery_fees,discount,cart_id,status,est_delivery_from,est_delivery_to) 
values(p_order_details_id , p_amount, p_addr, p_method, p_phone, p_fees, p_discount, p_cart_id, p_status, p_est_delivery_from, p_est_delivery_to);
end;

create or replace NONEDITIONABLE procedure insert_user(
p_address_id in number,
p_street in varchar,
p_locality in varchar,
p_city in varchar,
p_country in varchar
) is
begin
insert into user_address(address_id, street, locality, city, country) values(p_address_id, p_street,p_locality,p_city,p_country);
end;


create or replace NONEDITIONABLE procedure normal_select(
p_prod_id in number,
sizing out number)
is
begin
select sum(prod_size) into sizing from product where prod_id=p_prod_id;
end;


create or replace NONEDITIONABLE procedure update_user(
p_user_id in number, 
p_passcode in varchar
) is
begin
update users set passcode=p_passcode where user_id=p_user_id;
end;





--FUNCTIONS

create or replace NONEDITIONABLE function datefrom
return date
is
a date;
begin
select sysdate into a from dual;
return a;
end datefrom;

create or replace NONEDITIONABLE function dateto(
n1 in number
) return date
is
a date;
begin
select sysdate+n1 into a from dual;
return a;
end dateto;

create or replace NONEDITIONABLE function dds
return number
is 
total number;
begin
select count(*) into total from product;
return total;
end;

create or replace NONEDITIONABLE function getid(
n1 in number,
n2 in number
) return varchar
is
a varchar(20);
begin
select substr(sys_guid(),n1,n2)guid INTO a from dual;
return a;
end getid;

create or replace NONEDITIONABLE function paynow(
n1 in number
) return number
is
a number;
begin
select amount+delivery_fees into a from order_details where order_details_id=n1;
return a;
end paynow;

create or replace NONEDITIONABLE function sub(
n1 in number,
n2 in number
) return varchar
is
a varchar(20);
begin
select substr(sys_guid(),n1,n2)guid INTO a from dual;
return a;
end sub;




--TRIGGERS
create or replace NONEDITIONABLE trigger cartorpay
after insert on payment_details for each row
begin
insert into cartorderpayment_denorm values('', '', '', '', :new.pay_id, :new.total_amount);
end;

create or replace NONEDITIONABLE trigger cartorpay1
after insert on order_details for each row
begin
update cartorderpayment_denorm set order_details_id=:new.order_details_id, total_amount=:new.amount 
 where order_details_id is null and total_amount is null;
end;

create or replace NONEDITIONABLE trigger cartorpay2
after insert on cart_item for each row
begin
update cartorderpayment_denorm set cart_id=:new.cart_id, quantity=:new.quantity where cart_id is null and quantity is null;
end;

create or replace NONEDITIONABLE trigger del_insert_his
after delete on order_details for each row
begin
insert into order_history(order_details_id, amount, delivery_address, delivery_method, recipient_phone, 
delivery_fees, discount, cart_id, status, est_delivery_from, est_delivery_to) 
values(:old.order_details_id, :old.amount, :old.delivery_address, :old.delivery_method, :old.recipient_phone, 
:old.delivery_fees, :old.discount, :old.cart_id, :old.status, :old.est_delivery_from,:old.est_delivery_to);
end;

create or replace NONEDITIONABLE trigger order_pay_trig
after insert on payment_details for each row
begin
update order_details set status='confirmed' where order_details_id=:new.order_details_id;
end;

create or replace NONEDITIONABLE trigger trig_all
after insert or update or delete on prod 
for each row begin
update inv set quantity=quantity+1 where inv_id=7;
end;

create or replace NONEDITIONABLE trigger trig_and_address
before insert on user_address for each row
begin
insert into user_and_addressdenorm values('', '', '', :new.city, :new.country);
end;

create or replace NONEDITIONABLE trigger trig_and_address_delete
after delete on users for each row
begin
delete from user_and_addressdenorm where email=:old.email;
end;

create or replace NONEDITIONABLE trigger trig_and_address1
before insert on users
for each row
begin
update user_and_addressdenorm set fname=:new.fname where fname is null;
end;

create or replace NONEDITIONABLE trigger trig_and_address2
before insert on users
for each row
begin
update user_and_addressdenorm set lname=:new.lname where lname is null;
end;

create or replace NONEDITIONABLE trigger trig_and_address3
before insert on users
for each row
begin
update user_and_addressdenorm set email=:new.email where email is null;
end;

create or replace NONEDITIONABLE trigger trig_del
before delete on inventory for each row
begin
update discount set percentage=percentage + 1;
end;

create or replace NONEDITIONABLE trigger triger_all
after insert or update or delete on prod 
for each row begin
update inv set quantity=quantity+1 where inv_id=7;
update inv set quantity=quantity+100 where inv_id !=7;
end;



create or replace trigger schema_audit_trig
after ddl on schema
begin
insert into schema_audit 
values(sys_context('userenv','current_user'),ora_dict_obj_type,ora_dict_obj_name,ora_sysevent,sysdate);
end;create table schema_audit(
ddl_user varchar(20),
object_created varchar(20),
name varchar(20),
operation varchar(20),
ddl_date date
);


create or replace trigger schema_audit_trig
after ddl on schema
begin
insert into schema_audit 
values(sys_context('userenv','current_user'),ora_dict_obj_type,ora_dict_obj_name,ora_sysevent,sysdate);
end;


create table logon_audit(
event_type varchar(20),
logon_datetime timestamp
);

create or replace trigger logon_trig
after logon on schema                   
begin
insert into logon_audit(event_type,logon_datetime)
values(ora_sysevent, current_timestamp);
end;
--'on database' too can be applied. 'after startup on database, also applicable'

create table logoff_audit(
event_type varchar(20),
logoff_datetime timestamp
);

create or replace trigger logoff_audit
before logoff on schema 
begin
insert into logoff_audit(event_type,logoff_datetime)
values(ora_sysevent,current_timestamp);
end;



--SEQUENCES
CREATE SEQUENCE  CART_SEQ  MINVALUE 0 MAXVALUE 100 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
CREATE SEQUENCE  CATEG_SEQ  MINVALUE 0 MAXVALUE 100 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
CREATE SEQUENCE  DIS_SEQ  MINVALUE 0 MAXVALUE 100 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
CREATE SEQUENCE  INV_SEQ  MINVALUE 0 MAXVALUE 100 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
CREATE SEQUENCE  ORDER_DET_SEQ  MINVALUE 0 MAXVALUE 100 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
CREATE SEQUENCE  ORDER_HIS_SEQ  MINVALUE 0 MAXVALUE 100 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
CREATE SEQUENCE  PROD_SEQ  MINVALUE 0 MAXVALUE 100 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
CREATE SEQUENCE  USER_ADDR_SEQ  MINVALUE 0 MAXVALUE 100 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
CREATE SEQUENCE  USER_SEQ  MINVALUE 0 MAXVALUE 100 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
CREATE SEQUENCE  PAY_SEQ  MINVALUE 0 MAXVALUE 100 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;





--MV_LOG
CREATE MATERIALIZED VIEW LOG ON CATEGORY;
CREATE MATERIALIZED VIEW LOG ON INVENTORY;
CREATE MATERIALIZED VIEW LOG ON CART_ITEM;
CREATE MATERIALIZED VIEW LOG ON DISCOUNT;
CREATE MATERIALIZED VIEW LOG ON ORDER_DETAILS;
CREATE MATERIALIZED VIEW LOG ON PAYMENT_DETAILS;
CREATE MATERIALIZED VIEW LOG ON USER_ADDRESS;
CREATE MATERIALIZED VIEW LOG ON USERS;
CREATE MATERIALIZED VIEW LOG ON PRODUCT;



--SYNONYM
CREATE OR REPLACE NONEDITIONABLE SYNONYM CART FOR CART_ITEM;
CREATE OR REPLACE NONEDITIONABLE SYNONYM CATEG FOR CATEGORY;
CREATE OR REPLACE NONEDITIONABLE SYNONYM DIS FOR DISCOUNT;
CREATE OR REPLACE NONEDITIONABLE SYNONYM INV FOR INVENTORY;
CREATE OR REPLACE NONEDITIONABLE SYNONYM ORDERHIS FOR ORDER_HISTORY;
CREATE OR REPLACE NONEDITIONABLE SYNONYM ORDERS FOR ORDER_DETAILS;
CREATE OR REPLACE NONEDITIONABLE SYNONYM PROD FOR PRODUCT;
CREATE OR REPLACE NONEDITIONABLE SYNONYM USERADD FOR USER_ADDRESS;
CREATE OR REPLACE NONEDITIONABLE SYNONYM PAY FOR PAYMENT_DETAILS;



--INDEXES
create index inx_dis on discount(dis_id, name);
create index inx_dis on users(user_id, email,username,fname,lname,mname);
create index inx_dis on user_address(address_id, country);




--MATERIALIZED VIEW
create materialized view mv_user
as
select user_id, email, username, passcode, fname, lname, mname, phone, address_id from users;

create materialized view mv_prod
as
select prod_id,prodname,createdate,prod_size,desc_and_spec,image1,image2,image3,overview,warranty,return_policy from product;


create materialized view mv_pay
as
select pay_id,total_amount,payment_method,bank,date_time,order_details_id from payment_details;

create materialized view mv_dis
as
select dis_id,name,descrip,percentage,amount,active_yn,createdate from discount;

create materialized view mv_categ
as
select categ_id,name,descrip,createdate from category;


--INSERT
insert into category(categ_id,name,descrip,createdate) values(1,'clothe', 'for men',(select sysdate from dual));
insert into category(categ_id,name,descrip,createdate) values(2,'clothe','for men',(select sysdate from dual));
insert into category(categ_id,name,descrip,createdate) values(3,'clothe','for men',(select sysdate from dual));
insert into category(categ_id,name,descrip,createdate) values(4,'clothe','for men',(select sysdate from dual));
insert into category(categ_id,name,descrip,createdate) values(5,'clothe','for men',(select sysdate from dual));
insert into category(categ_id,name,descrip,createdate) values(6,'clothe','for men',(select sysdate from dual));



insert into discount(dis_id,name,descrip,percentage,amount,active_yn,createdate) values(1,'black friday','holidays',13,5000,'y',(select sysdate from dual));
insert into discount(dis_id,name,descrip,percentage,amount,active_yn,createdate) values(2,'black friday','holidays',20,2000,'y',(select sysdate from dual));
insert into discount(dis_id,name,descrip,percentage,amount,active_yn,createdate) values(3,'black friday','holidays',11,2000,'y',(select sysdate from dual));
insert into discount(dis_id,name,descrip,percentage,amount,active_yn,createdate) values(4,'black friday','holidays',12,1000,'y',(select sysdate from dual));
insert into discount(dis_id,name,descrip,percentage,amount,active_yn,createdate) values(5,'black friday','holidays',1,7000,'y',(select sysdate from dual));


insert into inventory(inv_id,quantity,createdate) values(1,300,(select sysdate from dual));
insert into inventory(inv_id,quantity,createdate) values(2,500,(select sysdate from dual));
insert into inventory(inv_id,quantity,createdate) values(3,100,(select sysdate from dual));
insert into inventory(inv_id,quantity,createdate) values(4,200,(select sysdate from dual));


insert into user_address(address_id,street,locality,city,country) values(1,'down lane','herethere','Abj','naija');
insert into user_address(address_id,street,locality,city,country) values(2,'left lane','herethere','Abj','naija');
insert into user_address(address_id,street,locality,city,country) values(3,'right lane','herethere','Abj','naija');
insert into user_address(address_id,street,locality,city,country) values(4,'up lane','herethere','Abj','naija');



insert into users(user_id,email,username,passcode,fname,lname,mname,phone,address_id) values(1,'aa@com','dammy','Abjdam1','dammy','crane','lux',11111111111,1);
insert into users(user_id,email,username,passcode,fname,lname,mname,phone,address_id) values(2,'ca@com','dammy','Abjdam4','lammy','crane','lux',11111111112,1);
insert into users(user_id,email,username,passcode,fname,lname,mname,phone,address_id) values(3,'sa@com','dammy','Abjdam3','bammy','crane','lux',11111111113,1);
insert into users(user_id,email,username,passcode,fname,lname,mname,phone,address_id) values(4,'aza@com','dammy','Abjdam2','rammy','crane','lux',11111111114,1);



insert into order_details(order_details_id,amount,delivery_address,delivery_method,recipient_phone,delivery_fees,discount,cart_id,status,est_delivery_from,est_delivery_to) 
values(17,60000,'food lane','pickup',111111112,200,15,9,default,datefrom(),dateto(12));
insert into order_details(order_details_id,amount,delivery_address,delivery_method,recipient_phone,delivery_fees,discount,cart_id,status,est_delivery_from,est_delivery_to) 
values(18,70000,'sweet lane','home delivery',33111111,100,25,7,default,datefrom(),dateto(12));
insert into order_history(order_details_id,amount,delivery_address,delivery_method,recipient_phone,delivery_fees,discount,cart_id,status,est_delivery_from,est_delivery_to) 
values(19,90000,'mandela lane','pickup',1111111123,100,35,5,default,datefrom(),dateto(12));
exec ins_order(20,22000,'click lane','home delivery',441111123,300,30,6,'pending',datefrom(),dateto(10));



insert into cart_item(cart_id,quantity,prod_id) values(1,200,1);
insert into cart_item(cart_id,quantity,prod_id) values(2,200,1);
insert into cart_item(cart_id,quantity,prod_id) values(3,200,1);
insert into cart_item(cart_id,quantity,prod_id) values(4,200,1);



--DROP
drop table user_address;
drop table category;
drop table discount;
drop table inventory;
drop table product;
drop table cart_item;
drop table users;
drop table order_details;
drop table order_history;
drop table payment_details;


